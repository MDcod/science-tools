# -*- coding: utf-8 -*-
"""core.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ltIP6WrKgC1HC8sgPrh1lm-5-9I42ppu
"""

import tkinter as tk
from tkinter import ttk, messagebox
import numpy as np
from scipy.optimize import curve_fit


# Функция модели Бертотти для подгонки
def bertotti_model(x, kh, kc, ke):
    f, Bm, d, rho = x
    Ph = kh * f * Bm**2
    Pc = kc * (f * Bm * d)**2 / rho
    Pa = ke * (f * Bm)**1.5
    return Ph + Pc + Pa

def calculate_bertotti_losses(f, Bm, kh, kc, ke, d, rho):
    Ph = kh * f * Bm**2
    Pc = kc * (f * Bm * d)**2 / rho
    Pa = ke * (f * Bm)**1.5
    P_total = Ph + Pc + Pa
    return Ph, Pc, Pa, P_total

def on_calculate_losses():
    try:
        f = float(entry_f.get())
        Bm = float(entry_Bm.get())
        kh = float(entry_kh.get())
        kc = float(entry_kc.get())
        ke = float(entry_ke.get())
        d = float(entry_d.get())
        rho = float(entry_rho.get())

        Ph, Pc, Pa, P_total = calculate_bertotti_losses(f, Bm, kh, kc, ke, d, rho)
        result_text.set(f"Гистерезисные потери (Ph): {Ph:.4f} Вт/кг\n"
                        f"Вихревые потери (Pc): {Pc:.4f} Вт/кг\n"
                        f"Аномальные потери (Pa): {Pa:.4f} Вт/кг\n"
                        f"Общие потери (P_total): {P_total:.4f} Вт/кг")
    except ValueError:
        messagebox.showerror("Ошибка", "Введите корректные числовые значения!")

def on_fit_coefficients():
    try:
        data_text = data_entry.get("1.0", tk.END).strip()
        lines = data_text.split("\n")
        f_data, Bm_data, d_data, rho_data, P_data = [], [], [], [], []

        for line in lines:
            if line and not line.startswith("#"):
                values = list(map(float, line.split()))
                if len(values) != 5:
                    raise ValueError("Каждая строка должна содержать 5 значений: f, Bm, d, rho, P")
                f_data.append(values[0])
                Bm_data.append(values[1])
                d_data.append(values[2])
                rho_data.append(values[3])
                P_data.append(values[4])

        x_data = np.array([f_data, Bm_data, d_data, rho_data])
        y_data = np.array(P_data)

        popt, _ = curve_fit(bertotti_model, x_data, y_data, p0=[0.02, 0.0001, 0.001])
        kh_fit, kc_fit, ke_fit = popt

        entry_kh.delete(0, tk.END)
        entry_kh.insert(0, f"{kh_fit:.6f}")
        entry_kc.delete(0, tk.END)
        entry_kc.insert(0, f"{kc_fit:.6f}")
        entry_ke.delete(0, tk.END)
        entry_ke.insert(0, f"{ke_fit:.6f}")

        fit_result_text.set(f"Подогнанные коэффициенты:\n"
                            f"kh = {kh_fit:.6f}\n"
                            f"kc = {kc_fit:.6f}\n"
                            f"ke = {ke_fit:.6f}")
    except Exception as e:
        messagebox.showerror("Ошибка", str(e))

# Создание главного окна
root = tk.Tk()
root.title("Модель Бертотти для анизотропной стали")
root.geometry("500x600")

notebook = ttk.Notebook(root)
notebook.pack(pady=10, expand=True)

frame_losses = ttk.Frame(notebook)
notebook.add(frame_losses, text="Расчет потерь")

labels = ["Частота (f, Гц):", "Макс. индукция (Bm, Тл):",
          "Коэф. гистерезиса (kh):", "Коэф. вихревых потерь (kc):",
          "Коэф. аномальных потерь (ke):", "Толщина листа (d, м):",
          "Удельное сопротивление (rho, Ом·м):"]
entries = []

for i, label_text in enumerate(labels):
    label = ttk.Label(frame_losses, text=label_text)
    label.grid(row=i, column=0, padx=5, pady=5, sticky="w")
    entry = ttk.Entry(frame_losses)
    entry.grid(row=i, column=1, padx=5, pady=5)
    entries.append(entry)

entry_f, entry_Bm, entry_kh, entry_kc, entry_ke, entry_d, entry_rho = entries

calculate_button = ttk.Button(frame_losses, text="Рассчитать", command=on_calculate_losses)
calculate_button.grid(row=len(labels), column=0, columnspan=2, pady=10)

result_text = tk.StringVar()
result_label = ttk.Label(frame_losses, textvariable=result_text, justify="left")
result_label.grid(row=len(labels)+1, column=0, columnspan=2, padx=5, pady=5)

entry_f.insert(0, "50")
entry_Bm.insert(0, "1.5")
entry_kh.insert(0, "0.02")
entry_kc.insert(0, "0.0001")
entry_ke.insert(0, "0.001")
entry_d.insert(0, "0.0003")
entry_rho.insert(0, "4.7e-7")

frame_fit = ttk.Frame(notebook)
notebook.add(frame_fit, text="Определение коэффициентов")

data_label = ttk.Label(frame_fit, text="Введите данные (f, Bm, d, rho, P) построчно:")
data_label.pack(pady=5)
data_entry = tk.Text(frame_fit, height=10, width=50)
data_entry.pack(pady=5)
data_entry.insert(tk.END, "# Пример:\n50 1.5 0.0003 4.7e-7 0.05\n100 1.0 0.0003 4.7e-7 0.03")

fit_button = ttk.Button(frame_fit, text="Подогнать коэффициенты", command=on_fit_coefficients)
fit_button.pack(pady=10)

fit_result_text = tk.StringVar()
fit_result_label = ttk.Label(frame_fit, textvariable=fit_result_text, justify="left")
fit_result_label.pack(pady=5)

root.mainloop()